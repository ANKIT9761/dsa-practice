/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        // When there is no graph
        if (node == null) {
            return null;
        }
        
        HashMap<Integer,Node> map = new HashMap<>();
        LinkedList<Node> q = new LinkedList<>();
        q.offer(node);
        Node t, curr;
        map.put(1,new Node(1));
        
        while(!q.isEmpty()){
            t = q.poll();
            curr = map.get(t.val);
            for(Node n: t.neighbors){
                // this node is visited
                if(map.containsKey(n.val)){
                    curr.neighbors.add(map.get(n.val));
                }
                else{
                    Node copy = new Node(n.val);
                    map.put(n.val,copy);
                    curr.neighbors.add(copy);
                    q.offer(n);
                }
            }
        }
        
        return map.get(1);
    }
}
